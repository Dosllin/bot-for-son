import os
import json
import logging
import pytz
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, JobQueue
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)
tz = pytz.timezone('Europe/Moscow')

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
QUESTIONS = [
    {
        "text": "üå∑ –¢–≤–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?",
        "options": [
            ("‚ù§Ô∏è –ö—Ä–∞—Å–Ω—ã–π", "color_red"),
            ("üíô –°–∏–Ω–∏–π", "color_blue"),
            ("üíõ –ñ–µ–ª—Ç—ã–π", "color_yellow"),
            ("üíú –§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "color_purple")
        ]
    },
    {
        "text": "üì∏ –°–∞–º–æ–µ —è—Ä–∫–æ–µ –Ω–∞—à–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
        "options": [
            ("ü§ò –ö–æ–Ω—Ü–µ—Ä—Ç", "memory_concert"),
            ("üç∑ –ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ", "memory_first_meet"),
            ("üé° –ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –¢–ö", "memory_park"),
            ("üí° –î–∏–∞–ª–æ–≥ –æ –ú–∏–ª–∞–Ω–µ", "memory_milana")
        ]
    },
    {
        "text": "üòä –ß—Ç–æ —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—É–µ—Ç?",
        "options": [
            ("üê∂ –©–µ–Ω–∫–∏", "joy_puppies"),
            ("üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ", "joy_art"),
            ("‚òï –ö–æ—Ñ–µ", "joy_coffee"),
            ("üìö –ö–Ω–∏–≥–∏", "joy_books")
        ]
    },
    {
        "text": "üåû –¢–≤–æ–µ –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞?",
        "options": [
            ("üå∏ –í–µ—Å–Ω–∞", "season_spring"),
            ("‚òÄÔ∏è –õ–µ—Ç–æ", "season_summer"),
            ("üçÇ –û—Å–µ–Ω—å", "season_autumn"),
            ("‚ùÑÔ∏è –ó–∏–º–∞", "season_winter")
        ]
    },
    {
        "text": "üéµ –ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?",
        "options": [
            ("üéπ –ú—É–∑—ã–∫–∞", "inspire_music"),
            ("üåå –ü—Ä–∏—Ä–æ–¥–∞", "inspire_nature"),
            ("üé≠ –ò—Å–∫—É—Å—Å—Ç–≤–æ", "inspire_art"),
            ("üöÄ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "inspire_travel")
        ]
    }
]



# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_user_data(user_id: int) -> dict:
    try:
        with open(f'users/{user_id}.json', 'r') as f:
            return json.load(f)
    except:
        return {'progress': 0, 'answers': {}, 'garden': []}


def save_user_data(user_id: int, data: dict):
    os.makedirs('users', exist_ok=True)
    with open(f'users/{user_id}.json', 'w') as f:
        json.dump(data, f, indent=2)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–¥–∞
def generate_garden(data: dict) -> str:
    elements = {
        'path': ['‚ñë‚ñë'] * 10,
        'flowers': [],
        'trees': [],
        'animals': [],
        'decor': []
    }

    # –¶–≤–µ—Ç—ã
    color_map = {
        'red': 'üåπ',
        'blue': 'üí†',
        'yellow': 'üåº',
        'purple': 'ü™ª'
    }
    if 'color' in data['answers']:
        elements['flowers'] = [color_map.get(data['answers']['color'], 'üå∏')]

    # –ü–∞–º—è—Ç—å
    memory_map = {
        'concert': 'üé∏',  # –ì–∏—Ç–∞—Ä–∫–∞ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–∞
        'first_meet': 'üç∑',  # –ë–æ–∫–∞–ª –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
        'park': 'üé°',  # –ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω
        'milana': 'üí°'  # –õ–∞–º–ø–æ—á–∫–∞ –∫–∞–∫ —Å–∏–º–≤–æ–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
    }
    if 'memory' in data['answers']:
        elements['trees'] = [
            'üå≥',
            memory_map.get(data['answers']['memory'], 'üå≤'),
            'üå¥'
        ]

    # –†–∞–¥–æ—Å—Ç—å
    if 'joy' in data['answers']:
        elements['animals'] = ['ü¶ã', 'üêá', 'üê¶']

    # –í—Ä–µ–º—è –≥–æ–¥–∞
    season_map = {
        'spring': 'üå∏',
        'summer': 'üåû',
        'autumn': 'üçÅ',
        'winter': '‚ùÑÔ∏è'
    }
    if 'season' in data['answers']:
        elements['decor'].append(season_map.get(data['answers']['season'], '‚ú®'))

    # –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ
    if 'inspire' in data['answers']:
        elements['decor'].extend(['üé∂', 'üåü', 'üí´'])

    # –°–æ–±–∏—Ä–∞–µ–º —Å–∞–¥
    garden = f"""
‚ú® *–°–∞–¥ {data.get('name', '–ú–µ—á—Ç—ã')}* ‚ú®
{' '.join(elements['decor'])}
      {' '.join(elements['flowers'])}
     {' '.join(elements['trees'])}
    {' '.join(elements['animals'])}
‚îè{'‚îÅ' * 18}‚îì
‚îÉ{'  '.join(elements['path'])}‚îÉ
‚îó{'‚îÅ' * 18}‚îõ
–ü—Ä–æ–≥—Ä–µ—Å—Å: {data['progress']}/{len(QUESTIONS)}
""".strip()

    return garden

def can_answer(last_date: str) -> bool:
    if not last_date: return True
    last = datetime.fromisoformat(last_date).astimezone(tz)
    return datetime.now(tz) > last + timedelta(hours=24)
# –ö–Ω–æ–ø–∫–∏
def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data='question'),
         InlineKeyboardButton("üåø –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–¥", callback_data='garden')],
        [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data='gift')]
    ])


def send_reminder(context: CallbackContext):
    user_id = context.job.context
    data = load_user_data(user_id)


    if data['progress'] < len(QUESTIONS):
        context.bot.send_message(
            chat_id=user_id,
            text="üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –°–æ–ª–Ω—ã—à–∫–æ! –°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n"
                 f"- –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è {data['progress'] + 1}\n"
                 "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å–∞–¥\n"
                 "–í—ã–±–∏—Ä–∞–π –≤ –º–µ–Ω—é! üå∏",
            reply_markup=main_menu()
        )
    if data['progress'] >= len(QUESTIONS):
        return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å–ª–∏ –∫–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω

def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    chat_id = user.id
    data = load_user_data(chat_id)
    save_user_data(chat_id, data)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    target_date = datetime(2024, 3, 5, 12, 0, tzinfo=tz)
    context.job_queue.run_once(
        callback=send_reminder,
        when=target_date,
        context=chat_id,
        name=f"reminder_{chat_id}"
    )



    context.bot.send_voice(
        chat_id=chat_id,
        voice=open('media/voice_message.ogg', 'rb'),
        caption=f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=main_menu()
    )


def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = update.effective_user
    data = load_user_data(user.id)

    try:
        query.answer()

        if query.data == 'garden':
            context.bot.send_message(
                chat_id=user.id,
                text=generate_garden(data),
                parse_mode='Markdown',
                reply_markup=main_menu()
            )

        elif query.data == 'question':
            if not can_answer(data.get('last_answer')):
                context.bot.send_message(
                    chat_id=user.id,
                    text="‚è≥ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞!\n–Ø –ø—Ä–∏—à–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Ç—Ä–æ–º üåÑ"
                )
                return

            if data['progress'] >= len(QUESTIONS):
                context.bot.send_message(
                    chat_id=user.id,
                    text="üéâ –¢—ã –ø—Ä–æ—à–ª–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –°–∞–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Ü–≤–µ–ª!",
                    reply_markup=main_menu()
                )
                return

            current_q = QUESTIONS[data['progress']]
            keyboard = [[InlineKeyboardButton(t, callback_data=c)] for t, c in current_q['options']]

            context.bot.send_message(
                chat_id=user.id,
                text=f"üìÖ –î–µ–Ω—å {data['progress'] + 1}\n{current_q['text']}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )



            # –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            context.job_queue.run_once(
                callback=send_reminder,
                when=86400,  # 24 —á–∞—Å–∞
                context=user.id,
                name=f"reminder_{user.id}"
            )

        elif query.data.startswith(('color_', 'memory_', 'joy_', 'season_', 'inspire_')):
            category, value = query.data.split('_', 1)
            data['answers'][category] = value

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –û–¢–í–ï–¢–ê
            data['progress'] += 1
            data['last_answer'] = datetime.now(tz).isoformat()
            save_user_data(user.id, data)

            context.bot.send_message(
                chat_id=user.id,
                text=f"üåø –û—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∞–¥: {value.capitalize()}",
                reply_markup=main_menu()
            )



        elif query.data == 'gift':

            if data['progress'] < len(QUESTIONS):

                context.bot.send_message(

                    chat_id=user.id,

                    text=f"üå± –¢–≤–æ–π —Å–∞–¥ –µ—â—ë –Ω–µ —Ä–∞—Å—Ü–≤–µ–ª! –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ {len(QUESTIONS) - data['progress']} –≤–æ–ø—Ä–æ—Å–æ–≤",

                    reply_markup=main_menu()
                )
                return  # –í–∞–∂–Ω–æ: –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ




            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

            context.bot.send_photo(

                chat_id=user.id,

                photo=open('media/your_photo.jpg', 'rb'),

                caption="üéâ *–¢–≤–æ–π —Å–∞–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Ü–≤–µ–ª!*\n"

                        "–°–ø–∞—Å–∏–±–æ, —Ç–µ–±–µ –∑–∞ –≤—Å—ë!)\n"
                        "üëá **–¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –∂–¥–µ—Ç –∑–¥–µ—Å—å** üëá\n"
                        "https://dosllin.github.io/8marta-sonya/",

                parse_mode='Markdown'

            )


    except Exception as e:

        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {str(e)}")

        context.bot.send_message(

            chat_id=user.id,

            text="üò¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"

        )

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π


def main() -> None:
  application = Application.builder().token(os.getenv('BOT_TOKEN')).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  application.add_handler(CommandHandler("start", start))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
  application.run_polling()


if __name__ == '__main__':
    main()
